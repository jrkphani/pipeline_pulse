---
description: 
globs: 
alwaysApply: true
---
# Pipeline Pulse - Augment Code Guidelines

## Project Overview

Pipeline Pulse is an Opportunity-to-Revenue (O2R) tracker for 1CloudHub that integrates with Zoho CRM to provide comprehensive sales pipeline analytics and tracking. The application runs in **Direct Access Mode** with no authentication required.

## Technology Stack Rules

- Use FastAPI for all backend API endpoints
- Use React with TypeScript for frontend components
- Use TanStack Query (React Query) for API state management
- Use shadcn/ui components for UI elements
- Use Tailwind CSS for styling - only core utility classes
- Use SQLAlchemy for PostgreSQL database operations
- Use Pydantic for data validation and serialization
- Use boto3 for AWS service interactions
- Use Pandas for data processing and analysis
- Use Recharts for data visualization
- Use Playwright for end-to-end testing

## AWS Deployment Rules

- Deploy backend on ECS/Fargate (Lambda removed due to complexity)
- Deploy frontend on S3 + CloudFront
- Use Application Load Balancer for backend traffic distribution
- Use PostgreSQL on Amazon RDS as the primary database
- Always use IAM roles, never hardcode credentials
- Tag all AWS resources with project and environment tags
- Use Route 53 for DNS management (1chsalesreports.com)
- Use AWS Certificate Manager for SSL certificates

## Database Connection Rules

- Use PostgreSQL on Amazon RDS as the database
- Use IAM database authentication for RDS PostgreSQL connections
- Never store database passwords in code or environment variables
- Implement connection retry logic with exponential backoff (via iam_database.py)
- Use SSL/TLS for all database connections
- Use PostgreSQL-specific features: JSONB, arrays, full-text search when appropriate
- Connection pooling handled by SQLAlchemy with proper lifecycle management

## Secrets Management Rules

- Use AWS Secrets Manager for ALL sensitive data
- Secret naming convention: pipeline-pulse/{environment}/{secret-name}
- Cache secrets in memory with TTL to reduce API calls
- Rotate secrets regularly using AWS Secrets Manager rotation
- Never log or print secret values
- Secrets to manage: Zoho API credentials (client_id, client_secret, refresh_token), Currency API key
- JWT secrets removed - no authentication in Direct Access Mode
- Use app.core.secrets module for all secret retrieval

## Code Structure Rules

- Backend API endpoints should be in app/api/endpoints/
- Frontend components should be in src/components/
- AWS utilities should be in app/core/ (secrets.py, iam_database.py)
- Services should be in app/services/ with subdirectories for complex services (e.g., zoho_crm/)
- Shared types should be defined in TypeScript interfaces
- Use async/await for all asynchronous operations
- Follow RESTful API design patterns
- Models should use SQLAlchemy declarative base in app/models/

## Zoho CRM Integration Rules

- Always use the field mappings defined in O2R_COMPLETE_MAPPING.md
- Available fields: Business Region, Solution Type, Type of Funding, Market Segment, Proposal Submission date, PO Generation Date, Kick-off Date, Invoice Date, Received On, OB Recognition Date
- Missing fields that need workarounds: Strategic Account Flag, SOW Initiated Date
- Respect Zoho API limits: max 100 records per bulk operation
- Store Zoho credentials in Secrets Manager (production) or environment variables (development)
- Always include error handling for Zoho API calls
- Use token management service (token_manager.py) for automatic token refresh
- Monitor token health via token_monitor.py service

## O2R Tracker Phase Rules

- Phase I: Opportunity to Proposal (uses Created Time and Proposal Submission date)
- Phase II: Proposal to Commitment (uses PO Generation Date)
- Phase III: Execution (uses Kick-off Date)
- Phase IV: Revenue Realization (uses Invoice Date, Received On, OB Recognition Date)
- Calculate health signals based on phase delays
- Store phase tracking data in analysis metadata JSONB field

## Database Rules

- Use PostgreSQL on Amazon RDS
- Use UUID for primary keys (PostgreSQL gen_random_uuid())
- Include created_at and updated_at timestamps
- Create proper indexes for frequently queried fields
- Use JSONB for storing flexible metadata and Zoho field mappings
- Always use database transactions for bulk operations
- Enable RDS Performance Insights for monitoring
- Use PostgreSQL-specific optimizations: partial indexes, GIN indexes for JSONB
- Configure appropriate RDS instance class based on workload
- Use Alembic for database migrations

## Frontend Component Rules

- Create reusable components in src/components/
- Use TypeScript interfaces for all props in src/types/
- Include loading and error states
- Use TanStack Query for data fetching with proper caching
- Follow shadcn/ui patterns for consistency
- Configure API endpoints via environment variables (VITE_API_URL)
- Component organization: ui/ for shadcn components, feature-specific subdirectories
- Use Vite for development and building

## Security Rules

- **Direct Access Mode**: No authentication required - application is open access
- Service account security for Zoho CRM integration
- Validate all user inputs on both frontend and backend
- Include audit trails for all data modifications
- Use AWS CloudTrail for API audit logging (if enabled)
- Implement least privilege IAM policies
- CORS protection with environment-specific origins
- Enable AWS GuardDuty for threat detection (optional)
- SSL/TLS encryption for all communications

## Testing Rules

- Write unit tests for critical business logic
- Include integration tests for Zoho CRM operations
- Test bulk operations with edge cases
- Mock AWS services using moto library (when applicable)
- Test IAM role assumptions and permissions
- Verify secrets retrieval and caching
- Use Playwright for end-to-end testing (tests/ directory)
- Test files: quick-verification.spec.js for basic checks

## Performance Rules

- Implement pagination for large datasets (default 100 records)
- Use background tasks for long-running operations
- Cache frequently accessed data (currency rates cached for 7 days)
- Optimize database queries with proper joins and indexes
- Use CloudWatch metrics for performance monitoring
- File upload limit: 50MB
- Use incremental updates for Zoho data sync

## Error Handling Rules

- Always provide meaningful error messages
- Log errors to CloudWatch Logs (production) or console (development)
- Handle Zoho API rate limits gracefully
- Implement circuit breakers for external services (when needed)
- Use structured logging with correlation IDs
- Set up CloudWatch alarms for critical errors (optional)
- Include proper error boundaries in React components

## Infrastructure as Code Rules

- Infrastructure managed via AWS Console and scripts (not IaC currently)
- Environment-specific configurations in separate files
- Use AWS Systems Manager Parameter Store for non-sensitive configs (if needed)
- Deployment scripts in scripts/ directory

## Naming Conventions

- Use camelCase for JavaScript/TypeScript variables
- Use snake_case for Python variables and functions
- Use PascalCase for React components and TypeScript interfaces
- Use UPPER_CASE for constants
- Prefix boolean variables with is_, has_, or should_
- AWS resource names: pipeline-pulse-{environment}-{resource-type}
- Database table names: plural, snake_case (e.g., analyses, uploaded_files)

## Environment-Specific Rules

### Development
- Use SQLite for local database by default
- Environment variables in .env files
- Direct Zoho API access with environment variable credentials
- Frontend runs on http://localhost:5173
- Backend runs on http://localhost:8000

### Production
- Live at https://1chsalesreports.com
- API at https://api.1chsalesreports.com
- All secrets via AWS Secrets Manager
- CloudFront distribution for frontend
- ECS Fargate for backend
- RDS PostgreSQL for database

## Currency Service Rules

- Use CurrencyFreaks API for exchange rates
- Base currency: SGD (Singapore Dollar)
- Cache exchange rates for 7 days
- Store rates in currency_rates table
- Automatic conversion in analysis service
- Handle API failures gracefully with fallback to cached rates

## Data Quality Rules

- Filter deals with probability between 10-89%
- Exclude deals with zero or null revenue
- Focus on active sales opportunities
- Include data quality indicators in analysis results
- Store filtering criteria in analysis metadata

## Recent Feature Additions

- Bulk Update functionality for Zoho records
- Token management service for automatic refresh
- Currency standardization with live exchange rates
- Account Manager Performance analytics
- Country pivot tables with drill-down capabilities
- File upload management with duplicate detection
- O2R phase tracking implementation